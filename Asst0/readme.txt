Tom Burns
Asst0
2/17/19
Section 2

I created a Linked List data structure to accomplish the task layed out in this assignment. I began by parsing the input string from the command line, checking for delimiters and storing tokens in my list.  

I created an insert method for my linked list that was specially designed for this project.  It is a sorted insert such that when given a token, it would follow the assignment description, sorting in both reverse alphabetic order and making sure that capitals dominate as well.  This was done by iterating over both the input string and token strings at the same time, comparing their values and following a decision tree based on the values of the characters being compared at each point.  While the characters were the same case and same value, the strings would continue to be compared.  If the input had capitals over the token's lowercase it caused the string's position to be found, while if the input had lowercase when the token had uppercase, the method would move to the next token in the list.  The sorted insert finds the position that it belongs in a linear fashion, checking each token until it finds the place the input string belongs amongst the tokens in the list.

All edge cases are handled, including ones where substrings are found, multiples of the same string are included, multiple delimiters are included, only delimiters are included, empty input is given, or particularly complex or nasty input is fed to the program.  This was done by only checking if the characters of the input string were alphanumeric, and assuming anything else was a delimiter not meant to be read and only used to delineate where the input tokens started and stopped.  I made sure to check if malloc can be performed and to free all dynamically allocated memory.

Included in my submission is a file named pointersorterDEBUG.c which includes debugging print statements in order to trace the logical flow of my program.  Using the print statements, I was able to figure out where bugs in the insertion to the list were happening and easily fix them.  I was able to insure that I was inserting the correct strings into the list as well.  The biggest problems I faced were when there would be substrings combined with replacement of the head of the list.  When I had a string that was a substring of another they would be deemed equal and whichever came first would end up first in the list followed by the other.  I had to implement a check at the end of the comparison, if the iterator had reached the end of one of the strings it would then compare the lengths of the strings and ensure that the larger would be placed in front of its substring.  After cutting out all of the debug statements and replacing most of them with only the comments explaining the flow of the logic in the program, the project is looking much neater and quite readable compared to when in the debug file.  The code is rather modular, allowing for this linked list structure to be reused rather easily, but the insert method could be somewhat polished up to be shorter and slightly less repetitive in its check.  The functionality and runtime would not be affected however, but it would make the code more readable and easy to follow.  Despite this I am proud of my work and am happy with its results.
