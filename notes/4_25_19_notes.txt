
DNS - Domain Naming Service
translates domain names into IP addresses

top-level/root
authoritative
non-authoritative
local

IP addresses - network-layer address (router)
MAC addresses - data link-layer addresses (switch)

TCP: Transmission Control Protocol

0. Reliability		(retransmit lost packets)
1. Ordering		(maintain packet order)
2. Flow Control		(moderate packet send rate based on destination's read speed)
3. Congestion Control 	(moderate packet send rate based on the network speed)

packet = chunk of message
rount trip time (RTT) = estimated time it takes to get to destination and back again


UDP: User Datagram Protocol

*port




no reliability, no ordering.....

.. no idea of 'connection':
-  must individually address every message
-  every message must be relayed entirely (no packets)
-  did it get there? was it fast? idk


------------------

mutex:
MUTual EXclusion device
Allows you to make a critical section 'atomic' .. in order to avoid race conditions

How?
---0. Make user uninterruptable--- (no don't do this)
1. Let OS do it
	can do it, but it is painfully slow to go in and out of OS for every single mutex call
2. problem is that you can be interrupted between any of the instructions ... so ... make them all the same one?
	>add an instruction that can do it all
	test and set


mechanism: mutex
instruction/primitive: test-and-set


Thread A	Thread B
lock(mutex0)	lock(mutex1)
lock(mutex1)	lock(mutex0)


Deadlock:
0. 
1. Hold and Wait
2. 
3. Circular Wait
